import javafx.application.Application;
import javafx.beans.property.SimpleStringProperty;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.scene.text.Font;
import javafx.scene.text.FontWeight;
import javafx.scene.text.Text;
import javafx.stage.Stage;
import javafx.scene.control.Label;
import javafx.scene.control.PasswordField;
import javafx.scene.control.Slider;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.control.TableColumn.CellEditEvent;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.control.cell.TextFieldTableCell;
import javafx.geometry.*;

public class App extends Application {

    Scene scene1, scene2, scene3;
    String username, password;
    String subject;
    String message;
    String[] recipients = new String[10];
    int pokeCount;
    private TableView<Person> table = new TableView<>();
    private ObservableList<Person> data = FXCollections.observableArrayList();
    HBox hb = new HBox();

    public static void main(String[] args) throws Exception
    {
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) throws Exception
    {
        Stage window = primaryStage;
        window.setTitle("Infinite Poke Application");
        window.setResizable(false);

        // Create grids
        GridPane grid1 = new GridPane();
        GridPane grid2 = new GridPane();
        GridPane grid3 = new GridPane();

        // Create a layout for grid1
        grid1.setAlignment(Pos.CENTER);
        grid1.setHgap(10);
        grid1.setVgap(10);
        grid1.setPadding(new Insets(25, 25, 25, 25));

        // Create a layout for grid2
        grid2.setAlignment(Pos.CENTER);
        grid2.setHgap(10);
        grid2.setVgap(10);
        grid2.setPadding(new Insets(25, 25, 25, 25));

        // Create a layout for grid3
        grid3.setAlignment(Pos.CENTER);
        grid3.setHgap(10);
        grid3.setVgap(10);
        grid3.setPadding(new Insets(25, 25, 25, 25));

        // Titles & Texts
        Text firstTitle = new Text("Your Initials");
        firstTitle.setFont(Font.font("Tahoma", FontWeight.NORMAL, 20));
        Text secondTitle = new Text("Recipient List");
        secondTitle.setFont(Font.font("Tahoma", FontWeight.NORMAL, 20));
        Text lastTitle = new Text("Mail Content");
        lastTitle.setFont(Font.font("Tahoma", FontWeight.NORMAL, 20));
        Text subjectTxt = new Text("Subject of the mail:");
        subjectTxt.setFont(Font.font("Tahoma", FontWeight.NORMAL, 11));
        Text messageTxt = new Text("Message");
        messageTxt.setFont(Font.font("Tahoma", FontWeight.NORMAL, 11));
        Text inforamation1 = new Text("The recipient list should not exceed 100 entries!");
        inforamation1.setFont(Font.font("Tahoma", FontWeight.NORMAL, 11));
        Text slideTxt = new Text("How many times you want to poke?");
        slideTxt.setFont(Font.font("Tahoma", FontWeight.NORMAL, 11));

        // Labels
        Label cred1 = new Label("Mail Address:");
        Label cred2 = new Label("Password:");

        // Text Fields
        TextField txt1 = new TextField();
        txt1.setPromptText("example@yahoo.com");
        txt1.setPrefWidth(250);
        TextField txt3 = new TextField();
        txt3.setPrefWidth(250);

        // Password Fields
        PasswordField txt2 = new PasswordField();
        txt2.setPromptText("The code generated by your mail service");
        txt2.setPrefWidth(250);

        // Text Areas
        TextArea txt4 = new TextArea();

        // Sliders
        Slider slider = new Slider(1, 10, 0);
        slider.setMinorTickCount(0);
        slider.setMajorTickUnit(1);
        slider.setSnapToTicks(true);
        slider.setShowTickLabels(true);
        slider.setShowTickMarks(true);

        // Table
        // *************************************************************************************************************

        table.setMaxHeight(250);
        table.setEditable(true);

        TableColumn<Person, String> emailCol = new TableColumn<>("Email");
        emailCol.setMinWidth(400);
        emailCol.setCellValueFactory(new PropertyValueFactory<>("email"));
        emailCol.setCellFactory(TextFieldTableCell.<Person>forTableColumn());
        emailCol.setOnEditCommit((CellEditEvent<Person, String> t) ->
        {
            ((Person) t.getTableView().getItems().get(t.getTablePosition().getRow())).setEmail(t.getNewValue());
        });
        
        table.setItems(data);
        table.getColumns().addAll(emailCol);

        TextField addEmail = new TextField();
        addEmail.setMinWidth(400);
        // addEmail.setMaxWidth(emailCol.getPrefWidth());
        addEmail.setPromptText("Email");

        Button addButton = new Button("Add");
        addButton.setOnAction((ActionEvent e) ->
        {
            data.add(new Person(addEmail.getText()));
            addEmail.clear();
        });

        hb.getChildren().addAll(addEmail, addButton);
        hb.setSpacing(3);

        VBox vbox = new VBox();
        vbox.setSpacing(5);
        vbox.setPadding(new Insets(10, 0, 0, 10));
        vbox.getChildren().addAll(table, hb);

        // ((Group) scene.getRoot()).getChildren().addAll(vbox);

        // end of table
        // *************************************************************************************************************

        // Buttons
        Button prev1 = new Button("Previous");
        Button prev2 = new Button("Previous");
        Button next1 = new Button("Next");
        Button next2 = new Button("Next");
        Button send = new Button("Send");

        // Button Actions
        next1.setOnAction(e ->
        {
            username = txt1.getText();
            password = txt2.getText();
            window.setScene(scene2);
        });
        next2.setOnAction(e ->
        {
            for (int i = 0; i < table.getItems().size(); i++)
            {
                if (table.getItems().get(i).getEmail() == null)
                    break;
                else
                    recipients[i] = table.getItems().get(i).getEmail();
            }

            window.setScene(scene3);
        });
        prev1.setOnAction(e -> window.setScene(scene1));
        prev2.setOnAction(e -> window.setScene(scene2));
        send.setOnAction(e ->
        {
            subject = txt3.getText();
            message = txt4.getText();
            pokeCount = (int) slider.getValue();

            // Creating mail object and calling sendEmail method from mail class.
            Mail mail = new Mail(username, password, recipients, subject, message, pokeCount);
            mail.sendEmail(mail);
        });

        // Adding the components to the grid1
        grid1.add(firstTitle, 0, 0, 2, 1);
        grid1.add(cred1, 0, 1);
        grid1.add(txt1, 1, 1);
        grid1.add(cred2, 0, 2);
        grid1.add(txt2, 1, 2);
        grid1.add(next1, 0, 3);

        // Adding the components to grid2
        grid2.add(secondTitle, 0, 0, 5, 1);
        grid2.add(inforamation1, 0, 1, 5, 1);
        grid2.add(vbox, 0, 2, 5, 1);
        grid2.add(prev1, 0, 3);
        grid2.add(next2, 1, 3);

        // Adding the components to grid3
        grid3.add(lastTitle, 0, 0, 5, 1);
        grid3.add(slideTxt, 0, 1, 5, 1);
        grid3.add(slider, 0, 2, 5, 1);
        grid3.add(subjectTxt, 0, 3, 5, 1);
        grid3.add(txt3, 0, 4, 5, 1);
        grid3.add(messageTxt, 0, 5, 5, 1);
        grid3.add(txt4, 0, 6, 5, 1);
        grid3.add(prev2, 0, 7, 1, 1);
        grid3.add(send, 1, 7, 1, 1);

        scene1 = new Scene(grid1, 900, 500);
        scene2 = new Scene(grid2, 900, 500);
        scene3 = new Scene(grid3, 900, 500);

        window.setScene(scene1);
        window.show();
    }

    public static class Person {
        private SimpleStringProperty email;

        private Person(String email)
        {
            this.email = new SimpleStringProperty(email);
        }

        public String getEmail()
        {
            return email.get();
        }

        public void setEmail(String email)
        {
            // "this" was not there. I added it to resolve the error. It might lead to other
            // errors in the future.
            this.email.set(email);
        }
    }

}
